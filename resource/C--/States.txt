
##############<状态0>#############
[import_staments-•,[import, $, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

[programe'->•programe,[$]]

--------------------------------------------
[import_staments->•import_staments import_stament,[]]

[programe->•import_staments top_defs,[]]


##############</状态0>#############

##############<状态1>#############
[programe'->programe•,[$]]

--------------------------------------------

##############</状态1>#############

##############<状态2>#############
[import_staments->import_staments •import_stament,[import, $, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

[programe->import_staments •top_defs,[$]]

[top_defs-•,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------
[import_stament->•import NAME,[]]

[top_defs->•top_defs top_def,[]]


##############</状态2>#############

##############<状态3>#############
[programe->import_staments top_defs•,[$]]

[storage-•,[short, void, union, struct, int, char, unsigned, signed, bool, float, long, double]]

[top_defs->top_defs •top_def,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------
[defconst->•const type id = expr ;,[]]

[defstruct->•struct name member_list ;,[]]

[defun->•storage type name ( params ) block,[]]

[defunion->•union name member_list ;,[]]

[defvars->•storage type name optional_expr initial_parts ;,[]]

[storage->•static,[]]

[top_def->•typedef,[]]

[top_def->•defunion,[]]

[top_def->•defconst,[]]

[top_def->•defun,[]]

[top_def->•defvars,[]]

[top_def->•defstruct,[]]

[typedef->•TYPEDEF type id ;,[]]


##############</状态3>#############

##############<状态4>#############
[import_stament->import •NAME,[import, $, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------
[NAME->•name,[]]

[NAME->•NAME . name,[]]

[name->•id,[]]


##############</状态4>#############

##############<状态5>#############
[import_staments->import_staments import_stament•,[import, $, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态5>#############

##############<状态6>#############
[top_def->defvars•,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态6>#############

##############<状态7>#############
[defstruct->struct •name member_list ;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------
[name->•id,[]]


##############</状态7>#############

##############<状态8>#############
[defun->storage •type name ( params ) block,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

[defvars->storage •type name optional_expr initial_parts ;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------
[int_type->•int,[]]

[int_type->•short,[]]

[int_type->•long,[]]

[int_type->•long long,[]]

[primary_type->•signed int_type,[]]

[primary_type->•struct id,[]]

[primary_type->•union id,[]]

[primary_type->•int_type,[]]

[primary_type->•double,[]]

[primary_type->•char,[]]

[primary_type->•void,[]]

[primary_type->•bool,[]]

[primary_type->•float,[]]

[primary_type->•unsigned int_type,[]]

[type->•primary_type type_postfix,[]]


##############</状态8>#############

##############<状态9>#############
[top_def->defstruct•,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态9>#############

##############<状态10>#############
[top_def->typedef•,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态10>#############

##############<状态11>#############
[top_def->defun•,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态11>#############

##############<状态12>#############
[typedef->TYPEDEF •type id ;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------
[int_type->•int,[]]

[int_type->•short,[]]

[int_type->•long,[]]

[int_type->•long long,[]]

[primary_type->•signed int_type,[]]

[primary_type->•struct id,[]]

[primary_type->•union id,[]]

[primary_type->•int_type,[]]

[primary_type->•double,[]]

[primary_type->•char,[]]

[primary_type->•void,[]]

[primary_type->•bool,[]]

[primary_type->•float,[]]

[primary_type->•unsigned int_type,[]]

[type->•primary_type type_postfix,[]]


##############</状态12>#############

##############<状态13>#############
[top_def->defunion•,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态13>#############

##############<状态14>#############
[defunion->union •name member_list ;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------
[name->•id,[]]


##############</状态14>#############

##############<状态15>#############
[top_def->defconst•,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态15>#############

##############<状态16>#############
[storage->static•,[struct, int, char, unsigned, long, short, void, union, signed, bool, float, double]]

--------------------------------------------

##############</状态16>#############

##############<状态17>#############
[defconst->const •type id = expr ;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------
[int_type->•int,[]]

[int_type->•short,[]]

[int_type->•long,[]]

[int_type->•long long,[]]

[primary_type->•signed int_type,[]]

[primary_type->•struct id,[]]

[primary_type->•union id,[]]

[primary_type->•int_type,[]]

[primary_type->•double,[]]

[primary_type->•char,[]]

[primary_type->•void,[]]

[primary_type->•bool,[]]

[primary_type->•float,[]]

[primary_type->•unsigned int_type,[]]

[type->•primary_type type_postfix,[]]


##############</状态17>#############

##############<状态18>#############
[top_defs->top_defs top_def•,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态18>#############

##############<状态19>#############
[name->id•,[+, -=, <<, long, ->, short, bool, %, /, ||, $, int, !=, :, >>, comma, <=, void, %=, union, <, signed, -, {, import, ?, struct, /=, char, ==, &&, +=, ;, TYPEDEF, >=, --, static, *, ., *=, double, ++, =, ], unsigned, [, ), >, (, const, float]]

--------------------------------------------

##############</状态19>#############

##############<状态20>#############
[NAME->name•,[import, $, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, ., const, bool, float, double]]

--------------------------------------------

##############</状态20>#############

##############<状态21>#############
[NAME->NAME •. name,[import, $, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, ., const, bool, float, double]]

[import_stament->import NAME•,[import, $, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态21>#############

##############<状态22>#############
[defstruct->struct name •member_list ;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------
[member_list->•{ slots },[]]


##############</状态22>#############

##############<状态23>#############
[defun->storage type •name ( params ) block,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

[defvars->storage type •name optional_expr initial_parts ;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------
[name->•id,[]]


##############</状态23>#############

##############<状态24>#############
[primary_type->struct •id,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态24>#############

##############<状态25>#############
[int_type->int•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态25>#############

##############<状态26>#############
[primary_type->char•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态26>#############

##############<状态27>#############
[primary_type->unsigned •int_type,[[, (, id, *, comma, )]]

--------------------------------------------
[int_type->•short,[]]

[int_type->•long,[]]

[int_type->•int,[]]

[int_type->•long long,[]]


##############</状态27>#############

##############<状态28>#############
[int_type->long •long,[[, (, id, *, comma, )]]

[int_type->long•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态28>#############

##############<状态29>#############
[int_type->short•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态29>#############

##############<状态30>#############
[primary_type->void•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态30>#############

##############<状态31>#############
[primary_type->union •id,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态31>#############

##############<状态32>#############
[primary_type->int_type•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态32>#############

##############<状态33>#############
[primary_type->signed •int_type,[[, (, id, *, comma, )]]

--------------------------------------------
[int_type->•short,[]]

[int_type->•long,[]]

[int_type->•int,[]]

[int_type->•long long,[]]


##############</状态33>#############

##############<状态34>#############
[type->primary_type •type_postfix,[id, comma, )]]

[type_postfix-•,[[, (, id, *, comma, )]]

--------------------------------------------
[type_postfix->•type_postfix *,[]]

[type_postfix->•type_postfix ( param_typerefs ),[]]

[type_postfix->•type_postfix [ ],[]]

[type_postfix->•type_postfix [ INTEGER ],[]]

[type_postfix->•type_postfix ( void ),[]]


##############</状态34>#############

##############<状态35>#############
[primary_type->bool•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态35>#############

##############<状态36>#############
[primary_type->float•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态36>#############

##############<状态37>#############
[primary_type->double•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态37>#############

##############<状态38>#############
[typedef->TYPEDEF type •id ;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态38>#############

##############<状态39>#############
[defunion->union name •member_list ;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------
[member_list->•{ slots },[]]


##############</状态39>#############

##############<状态40>#############
[defconst->const type •id = expr ;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态40>#############

##############<状态41>#############
[NAME->NAME . •name,[import, $, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, ., const, bool, float, double]]

--------------------------------------------
[name->•id,[]]


##############</状态41>#############

##############<状态42>#############
[member_list->{ •slots },[;]]

[slots-•,[}, struct, int, char, unsigned, long, short, void, union, signed, bool, float, double]]

--------------------------------------------
[slots->•slots type name ;,[]]


##############</状态42>#############

##############<状态43>#############
[defstruct->struct name member_list •;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态43>#############

##############<状态44>#############
[defun->storage type name •( params ) block,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

[defvars->storage type name •optional_expr initial_parts ;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

[optional_expr-•,[;, comma]]

--------------------------------------------
[optional_expr->•= expr,[]]


##############</状态44>#############

##############<状态45>#############
[primary_type->struct id•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态45>#############

##############<状态46>#############
[primary_type->unsigned int_type•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态46>#############

##############<状态47>#############
[int_type->long long•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态47>#############

##############<状态48>#############
[primary_type->union id•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态48>#############

##############<状态49>#############
[primary_type->signed int_type•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态49>#############

##############<状态50>#############
[type->primary_type type_postfix•,[id, comma, )]]

[type_postfix->type_postfix •*,[[, (, id, *, comma, )]]

[type_postfix->type_postfix •( param_typerefs ),[[, (, id, *, comma, )]]

[type_postfix->type_postfix •[ ],[[, (, id, *, comma, )]]

[type_postfix->type_postfix •( void ),[[, (, id, *, comma, )]]

[type_postfix->type_postfix •[ INTEGER ],[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态50>#############

##############<状态51>#############
[typedef->TYPEDEF type id •;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态51>#############

##############<状态52>#############
[defunion->union name member_list •;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态52>#############

##############<状态53>#############
[defconst->const type id •= expr ;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态53>#############

##############<状态54>#############
[NAME->NAME . name•,[import, $, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, ., const, bool, float, double]]

--------------------------------------------

##############</状态54>#############

##############<状态55>#############
[member_list->{ slots •},[;]]

[slots->slots •type name ;,[}, struct, int, char, unsigned, long, short, void, union, signed, bool, float, double]]

--------------------------------------------
[int_type->•int,[]]

[int_type->•short,[]]

[int_type->•long,[]]

[int_type->•long long,[]]

[primary_type->•signed int_type,[]]

[primary_type->•struct id,[]]

[primary_type->•union id,[]]

[primary_type->•int_type,[]]

[primary_type->•double,[]]

[primary_type->•char,[]]

[primary_type->•void,[]]

[primary_type->•bool,[]]

[primary_type->•float,[]]

[primary_type->•unsigned int_type,[]]

[type->•primary_type type_postfix,[]]


##############</状态55>#############

##############<状态56>#############
[defstruct->struct name member_list ;•,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态56>#############

##############<状态57>#############
[optional_expr->= •expr,[;, comma]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态57>#############

##############<状态58>#############
[defvars->storage type name optional_expr •initial_parts ;,[+, {, !, return, struct, FLOAT, char, STRING, long, short, ;, TYPEDEF, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, $, int, }, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, const, float]]

[initial_parts-•,[;, comma]]

--------------------------------------------
[initial_parts->•initial_parts initial_part,[]]


##############</状态58>#############

##############<状态59>#############
[defun->storage type name ( •params ) block,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------
[fixed_params->•fixed_params comma param,[]]

[fixed_params->•param,[]]

[int_type->•int,[]]

[int_type->•short,[]]

[int_type->•long,[]]

[int_type->•long long,[]]

[param->•type name,[]]

[params->•fixed_params kwargs,[]]

[params->•void,[]]

[primary_type->•signed int_type,[]]

[primary_type->•struct id,[]]

[primary_type->•union id,[]]

[primary_type->•int_type,[]]

[primary_type->•double,[]]

[primary_type->•char,[]]

[primary_type->•void,[]]

[primary_type->•bool,[]]

[primary_type->•float,[]]

[primary_type->•unsigned int_type,[]]

[type->•primary_type type_postfix,[]]


##############</状态59>#############

##############<状态60>#############
[type_postfix->type_postfix [ •INTEGER ],[[, (, id, *, comma, )]]

[type_postfix->type_postfix [ •],[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态60>#############

##############<状态61>#############
[type_postfix->type_postfix ( •param_typerefs ),[[, (, id, *, comma, )]]

[type_postfix->type_postfix ( •void ),[[, (, id, *, comma, )]]

--------------------------------------------
[fixed_param_ref->•fixed_param_ref comma type,[]]

[fixed_param_ref->•type,[]]

[int_type->•int,[]]

[int_type->•short,[]]

[int_type->•long,[]]

[int_type->•long long,[]]

[param_typerefs->•fixed_param_ref kwargs,[]]

[primary_type->•signed int_type,[]]

[primary_type->•struct id,[]]

[primary_type->•union id,[]]

[primary_type->•int_type,[]]

[primary_type->•double,[]]

[primary_type->•char,[]]

[primary_type->•void,[]]

[primary_type->•bool,[]]

[primary_type->•float,[]]

[primary_type->•unsigned int_type,[]]

[type->•primary_type type_postfix,[]]


##############</状态61>#############

##############<状态62>#############
[type_postfix->type_postfix *•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态62>#############

##############<状态63>#############
[typedef->TYPEDEF type id ;•,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态63>#############

##############<状态64>#############
[defunion->union name member_list ;•,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态64>#############

##############<状态65>#############
[defconst->const type id = •expr ;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态65>#############

##############<状态66>#############
[slots->slots type •name ;,[}, struct, int, char, unsigned, long, short, void, union, signed, bool, float, double]]

--------------------------------------------
[name->•id,[]]


##############</状态66>#############

##############<状态67>#############
[member_list->{ slots }•,[;]]

--------------------------------------------

##############</状态67>#############

##############<状态68>#############
[unary_operator->+•,[+, CHARACTOR, ++, INTEGER, !, FLOAT, STRING, --, SIZEOF, ~, &, id, (, -, *]]

--------------------------------------------

##############</状态68>#############

##############<状态69>#############
[unary_operator->!•,[+, CHARACTOR, ++, INTEGER, !, FLOAT, STRING, --, SIZEOF, ~, &, id, (, -, *]]

--------------------------------------------

##############</状态69>#############

##############<状态70>#############
[CONSTANT->FLOAT•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态70>#############

##############<状态71>#############
[optional_expr->= expr•,[;, comma]]

--------------------------------------------

##############</状态71>#############

##############<状态72>#############
[logical_and_expr->logical_and_expr •&& equality_expr,[||, ;, ?, ], :, &&, comma, )]]

[logical_or_expr->logical_and_expr•,[||, ;, ?, ], :, comma, )]]

--------------------------------------------

##############</状态72>#############

##############<状态73>#############
[CONSTANT->STRING•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态73>#############

##############<状态74>#############
[term->unary_expr•,[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------

##############</状态74>#############

##############<状态75>#############
[expr->conditional_expr•,[;, ], :, comma, )]]

--------------------------------------------

##############</状态75>#############

##############<状态76>#############
[unary_expr->-- •unary_expr,[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态76>#############

##############<状态77>#############
[unary_operator->&•,[+, CHARACTOR, ++, INTEGER, !, FLOAT, STRING, --, SIZEOF, ~, &, id, (, -, *]]

--------------------------------------------

##############</状态77>#############

##############<状态78>#############
[unary_operator->~•,[+, CHARACTOR, ++, INTEGER, !, FLOAT, STRING, --, SIZEOF, ~, &, id, (, -, *]]

--------------------------------------------

##############</状态78>#############

##############<状态79>#############
[primary_expr->id•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态79>#############

##############<状态80>#############
[unary_operator->*•,[+, CHARACTOR, ++, INTEGER, !, FLOAT, STRING, --, SIZEOF, ~, &, id, (, -, *]]

--------------------------------------------

##############</状态80>#############

##############<状态81>#############
[postfix_expr->postfix_expr •--,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

[postfix_expr->postfix_expr •( ),[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

[postfix_expr->postfix_expr •++,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

[postfix_expr->postfix_expr •( args ),[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

[postfix_expr->postfix_expr •[ expr ],[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

[postfix_expr->postfix_expr •. name,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

[postfix_expr->postfix_expr •-> name,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

[unary_expr->postfix_expr•,[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------

##############</状态81>#############

##############<状态82>#############
[CONSTANT->CHARACTOR•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态82>#############

##############<状态83>#############
[conditional_expr->logical_or_expr•,[;, ], :, comma, )]]

[conditional_expr->logical_or_expr •? expr : conditional_expr,[;, ], :, comma, )]]

[logical_or_expr->logical_or_expr •|| logical_and_expr,[||, ;, ?, ], :, comma, )]]

--------------------------------------------

##############</状态83>#############

##############<状态84>#############
[unary_expr->++ •unary_expr,[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态84>#############

##############<状态85>#############
[CONSTANT->INTEGER•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态85>#############

##############<状态86>#############
[expr->term •opassign_op expr,[;, ], :, comma, )]]

[expr->term •= expr,[;, ], :, comma, )]]

[multiplicative_expr->term•,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

--------------------------------------------
[opassign_op->•/=,[]]

[opassign_op->•+=,[]]

[opassign_op->•*=,[]]

[opassign_op->•-=,[]]

[opassign_op->•%=,[]]


##############</状态86>#############

##############<状态87>#############
[equality_expr->relational_expr•,[||, ;, ?, ], ==, !=, :, &&, comma, )]]

[relational_expr->relational_expr •> shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

[relational_expr->relational_expr •>= shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

[relational_expr->relational_expr •< shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

[relational_expr->relational_expr •<= shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

--------------------------------------------

##############</状态87>#############

##############<状态88>#############
[postfix_expr->primary_expr•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态88>#############

##############<状态89>#############
[unary_expr->SIZEOF •unary_expr,[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

[unary_expr->SIZEOF •( type ),[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态89>#############

##############<状态90>#############
[relational_expr->shift_expr•,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

[shift_expr->shift_expr •<< additive_expr,[||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <]]

[shift_expr->shift_expr •>> additive_expr,[||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <]]

--------------------------------------------

##############</状态90>#############

##############<状态91>#############
[equality_expr->equality_expr •!= relational_expr,[||, ;, ?, ], ==, !=, :, &&, comma, )]]

[equality_expr->equality_expr •== relational_expr,[||, ;, ?, ], ==, !=, :, &&, comma, )]]

[logical_and_expr->equality_expr•,[||, ;, ?, ], :, &&, comma, )]]

--------------------------------------------

##############</状态91>#############

##############<状态92>#############
[primary_expr->( •expr ),[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

[term->( •type ) unary_expr,[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[int_type->•short,[]]

[int_type->•long,[]]

[int_type->•int,[]]

[int_type->•long long,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[primary_type->•void,[]]

[primary_type->•union id,[]]

[primary_type->•int_type,[]]

[primary_type->•double,[]]

[primary_type->•bool,[]]

[primary_type->•unsigned int_type,[]]

[primary_type->•signed int_type,[]]

[primary_type->•struct id,[]]

[primary_type->•char,[]]

[primary_type->•float,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[type->•primary_type type_postfix,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态92>#############

##############<状态93>#############
[unary_operator->-•,[+, CHARACTOR, ++, INTEGER, !, FLOAT, STRING, --, SIZEOF, ~, &, id, (, -, *]]

--------------------------------------------

##############</状态93>#############

##############<状态94>#############
[unary_expr->unary_operator •term,[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态94>#############

##############<状态95>#############
[additive_expr->multiplicative_expr•,[+, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -]]

[multiplicative_expr->multiplicative_expr •/ term,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

[multiplicative_expr->multiplicative_expr •* term,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

[multiplicative_expr->multiplicative_expr •% term,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

--------------------------------------------

##############</状态95>#############

##############<状态96>#############
[additive_expr->additive_expr •+ multiplicative_expr,[+, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -]]

[additive_expr->additive_expr •- multiplicative_expr,[+, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -]]

[shift_expr->additive_expr•,[||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <]]

--------------------------------------------

##############</状态96>#############

##############<状态97>#############
[primary_expr->CONSTANT•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态97>#############

##############<状态98>#############
[defvars->storage type name optional_expr initial_parts •;,[+, {, !, return, struct, FLOAT, char, STRING, long, short, ;, TYPEDEF, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, $, int, }, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, const, float]]

[initial_parts->initial_parts •initial_part,[;, comma]]

--------------------------------------------
[initial_part->•comma name optional_expr,[]]


##############</状态98>#############

##############<状态99>#############
[defun->storage type name ( params •) block,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态99>#############

##############<状态100>#############
[param->type •name,[comma, )]]

--------------------------------------------
[name->•id,[]]


##############</状态100>#############

##############<状态101>#############
[params->void•,[)]]

[primary_type->void•,[[, (, id, *]]

--------------------------------------------

##############</状态101>#############

##############<状态102>#############
[fixed_params->param•,[comma, )]]

--------------------------------------------

##############</状态102>#############

##############<状态103>#############
[fixed_params->fixed_params •comma param,[comma, )]]

[kwargs-•,[)]]

[params->fixed_params •kwargs,[)]]

--------------------------------------------
[kwargs->•comma ...,[]]


##############</状态103>#############

##############<状态104>#############
[type_postfix->type_postfix [ INTEGER •],[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态104>#############

##############<状态105>#############
[type_postfix->type_postfix [ ]•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态105>#############

##############<状态106>#############
[fixed_param_ref->fixed_param_ref •comma type,[comma, )]]

[kwargs-•,[)]]

[param_typerefs->fixed_param_ref •kwargs,[)]]

--------------------------------------------
[kwargs->•comma ...,[]]


##############</状态106>#############

##############<状态107>#############
[fixed_param_ref->type•,[comma, )]]

--------------------------------------------

##############</状态107>#############

##############<状态108>#############
[type_postfix->type_postfix ( param_typerefs •),[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态108>#############

##############<状态109>#############
[primary_type->void•,[[, (, *, comma, )]]

[type_postfix->type_postfix ( void •),[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态109>#############

##############<状态110>#############
[defconst->const type id = expr •;,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态110>#############

##############<状态111>#############
[slots->slots type name •;,[}, struct, int, char, unsigned, long, short, void, union, signed, bool, float, double]]

--------------------------------------------

##############</状态111>#############

##############<状态112>#############
[logical_and_expr->logical_and_expr && •equality_expr,[||, ;, ?, ], :, &&, comma, )]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态112>#############

##############<状态113>#############
[unary_expr->-- unary_expr•,[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------

##############</状态113>#############

##############<状态114>#############
[primary_expr->( •expr ),[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态114>#############

##############<状态115>#############
[postfix_expr->postfix_expr ++•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态115>#############

##############<状态116>#############
[postfix_expr->postfix_expr --•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态116>#############

##############<状态117>#############
[postfix_expr->postfix_expr [ •expr ],[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态117>#############

##############<状态118>#############
[postfix_expr->postfix_expr ( •),[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

[postfix_expr->postfix_expr ( •args ),[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[args->•args comma expr,[]]

[args->•expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态118>#############

##############<状态119>#############
[postfix_expr->postfix_expr . •name,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------
[name->•id,[]]


##############</状态119>#############

##############<状态120>#############
[postfix_expr->postfix_expr -> •name,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------
[name->•id,[]]


##############</状态120>#############

##############<状态121>#############
[logical_or_expr->logical_or_expr || •logical_and_expr,[||, ;, ?, ], :, comma, )]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态121>#############

##############<状态122>#############
[conditional_expr->logical_or_expr ? •expr : conditional_expr,[;, ], :, comma, )]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态122>#############

##############<状态123>#############
[unary_expr->++ unary_expr•,[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------

##############</状态123>#############

##############<状态124>#############
[opassign_op->+=•,[+, CHARACTOR, ++, INTEGER, !, FLOAT, STRING, --, SIZEOF, ~, &, id, (, -, *]]

--------------------------------------------

##############</状态124>#############

##############<状态125>#############
[opassign_op->%=•,[+, CHARACTOR, ++, INTEGER, !, FLOAT, STRING, --, SIZEOF, ~, &, id, (, -, *]]

--------------------------------------------

##############</状态125>#############

##############<状态126>#############
[opassign_op->/=•,[+, CHARACTOR, ++, INTEGER, !, FLOAT, STRING, --, SIZEOF, ~, &, id, (, -, *]]

--------------------------------------------

##############</状态126>#############

##############<状态127>#############
[expr->term opassign_op •expr,[;, ], :, comma, )]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态127>#############

##############<状态128>#############
[expr->term = •expr,[;, ], :, comma, )]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态128>#############

##############<状态129>#############
[opassign_op->-=•,[+, CHARACTOR, ++, INTEGER, !, FLOAT, STRING, --, SIZEOF, ~, &, id, (, -, *]]

--------------------------------------------

##############</状态129>#############

##############<状态130>#############
[opassign_op->*=•,[+, CHARACTOR, ++, INTEGER, !, FLOAT, STRING, --, SIZEOF, ~, &, id, (, -, *]]

--------------------------------------------

##############</状态130>#############

##############<状态131>#############
[relational_expr->relational_expr <= •shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态131>#############

##############<状态132>#############
[relational_expr->relational_expr >= •shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态132>#############

##############<状态133>#############
[relational_expr->relational_expr > •shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态133>#############

##############<状态134>#############
[relational_expr->relational_expr < •shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态134>#############

##############<状态135>#############
[unary_expr->SIZEOF unary_expr•,[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------

##############</状态135>#############

##############<状态136>#############
[primary_expr->( •expr ),[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

[unary_expr->SIZEOF ( •type ),[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[int_type->•short,[]]

[int_type->•long,[]]

[int_type->•int,[]]

[int_type->•long long,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[primary_type->•void,[]]

[primary_type->•union id,[]]

[primary_type->•int_type,[]]

[primary_type->•double,[]]

[primary_type->•bool,[]]

[primary_type->•unsigned int_type,[]]

[primary_type->•signed int_type,[]]

[primary_type->•struct id,[]]

[primary_type->•char,[]]

[primary_type->•float,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[type->•primary_type type_postfix,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态136>#############

##############<状态137>#############
[shift_expr->shift_expr << •additive_expr,[||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态137>#############

##############<状态138>#############
[shift_expr->shift_expr >> •additive_expr,[||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态138>#############

##############<状态139>#############
[equality_expr->equality_expr == •relational_expr,[||, ;, ?, ], ==, !=, :, &&, comma, )]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态139>#############

##############<状态140>#############
[equality_expr->equality_expr != •relational_expr,[||, ;, ?, ], ==, !=, :, &&, comma, )]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态140>#############

##############<状态141>#############
[primary_expr->( expr •),[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态141>#############

##############<状态142>#############
[term->( type •) unary_expr,[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------

##############</状态142>#############

##############<状态143>#############
[unary_expr->unary_operator term•,[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------

##############</状态143>#############

##############<状态144>#############
[multiplicative_expr->multiplicative_expr / •term,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态144>#############

##############<状态145>#############
[multiplicative_expr->multiplicative_expr * •term,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态145>#############

##############<状态146>#############
[multiplicative_expr->multiplicative_expr % •term,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态146>#############

##############<状态147>#############
[additive_expr->additive_expr + •multiplicative_expr,[+, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态147>#############

##############<状态148>#############
[additive_expr->additive_expr - •multiplicative_expr,[+, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态148>#############

##############<状态149>#############
[defvars->storage type name optional_expr initial_parts ;•,[+, {, !, return, struct, FLOAT, char, STRING, long, short, ;, TYPEDEF, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, $, int, }, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, const, float]]

--------------------------------------------

##############</状态149>#############

##############<状态150>#############
[initial_part->comma •name optional_expr,[;, comma]]

--------------------------------------------
[name->•id,[]]


##############</状态150>#############

##############<状态151>#############
[initial_parts->initial_parts initial_part•,[;, comma]]

--------------------------------------------

##############</状态151>#############

##############<状态152>#############
[defun->storage type name ( params ) •block,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------
[block->•{ block_componets },[]]


##############</状态152>#############

##############<状态153>#############
[param->type name•,[comma, )]]

--------------------------------------------

##############</状态153>#############

##############<状态154>#############
[params->fixed_params kwargs•,[)]]

--------------------------------------------

##############</状态154>#############

##############<状态155>#############
[fixed_params->fixed_params comma •param,[comma, )]]

[kwargs->comma •...,[)]]

--------------------------------------------
[int_type->•int,[]]

[int_type->•short,[]]

[int_type->•long,[]]

[int_type->•long long,[]]

[param->•type name,[]]

[primary_type->•signed int_type,[]]

[primary_type->•struct id,[]]

[primary_type->•union id,[]]

[primary_type->•int_type,[]]

[primary_type->•double,[]]

[primary_type->•char,[]]

[primary_type->•void,[]]

[primary_type->•bool,[]]

[primary_type->•float,[]]

[primary_type->•unsigned int_type,[]]

[type->•primary_type type_postfix,[]]


##############</状态155>#############

##############<状态156>#############
[type_postfix->type_postfix [ INTEGER ]•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态156>#############

##############<状态157>#############
[param_typerefs->fixed_param_ref kwargs•,[)]]

--------------------------------------------

##############</状态157>#############

##############<状态158>#############
[fixed_param_ref->fixed_param_ref comma •type,[comma, )]]

[kwargs->comma •...,[)]]

--------------------------------------------
[int_type->•int,[]]

[int_type->•short,[]]

[int_type->•long,[]]

[int_type->•long long,[]]

[primary_type->•signed int_type,[]]

[primary_type->•struct id,[]]

[primary_type->•union id,[]]

[primary_type->•int_type,[]]

[primary_type->•double,[]]

[primary_type->•char,[]]

[primary_type->•void,[]]

[primary_type->•bool,[]]

[primary_type->•float,[]]

[primary_type->•unsigned int_type,[]]

[type->•primary_type type_postfix,[]]


##############</状态158>#############

##############<状态159>#############
[type_postfix->type_postfix ( param_typerefs )•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态159>#############

##############<状态160>#############
[type_postfix->type_postfix ( void )•,[[, (, id, *, comma, )]]

--------------------------------------------

##############</状态160>#############

##############<状态161>#############
[defconst->const type id = expr ;•,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态161>#############

##############<状态162>#############
[slots->slots type name ;•,[}, struct, int, char, unsigned, long, short, void, union, signed, bool, float, double]]

--------------------------------------------

##############</状态162>#############

##############<状态163>#############
[multiplicative_expr->term•,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

--------------------------------------------

##############</状态163>#############

##############<状态164>#############
[equality_expr->equality_expr •!= relational_expr,[||, ;, ?, ], ==, !=, :, &&, comma, )]]

[equality_expr->equality_expr •== relational_expr,[||, ;, ?, ], ==, !=, :, &&, comma, )]]

[logical_and_expr->logical_and_expr && equality_expr•,[||, ;, ?, ], :, &&, comma, )]]

--------------------------------------------

##############</状态164>#############

##############<状态165>#############
[postfix_expr->postfix_expr [ expr •],[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态165>#############

##############<状态166>#############
[args->expr•,[comma, )]]

--------------------------------------------

##############</状态166>#############

##############<状态167>#############
[args->args •comma expr,[comma, )]]

[postfix_expr->postfix_expr ( args •),[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态167>#############

##############<状态168>#############
[postfix_expr->postfix_expr ( )•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态168>#############

##############<状态169>#############
[postfix_expr->postfix_expr . name•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态169>#############

##############<状态170>#############
[postfix_expr->postfix_expr -> name•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态170>#############

##############<状态171>#############
[logical_and_expr->logical_and_expr •&& equality_expr,[||, ;, ?, ], :, &&, comma, )]]

[logical_or_expr->logical_or_expr || logical_and_expr•,[||, ;, ?, ], :, comma, )]]

--------------------------------------------

##############</状态171>#############

##############<状态172>#############
[conditional_expr->logical_or_expr ? expr •: conditional_expr,[;, ], :, comma, )]]

--------------------------------------------

##############</状态172>#############

##############<状态173>#############
[expr->term opassign_op expr•,[;, ], :, comma, )]]

--------------------------------------------

##############</状态173>#############

##############<状态174>#############
[expr->term = expr•,[;, ], :, comma, )]]

--------------------------------------------

##############</状态174>#############

##############<状态175>#############
[relational_expr->relational_expr <= shift_expr•,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

[shift_expr->shift_expr •<< additive_expr,[||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <]]

[shift_expr->shift_expr •>> additive_expr,[||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <]]

--------------------------------------------

##############</状态175>#############

##############<状态176>#############
[relational_expr->relational_expr >= shift_expr•,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

[shift_expr->shift_expr •<< additive_expr,[||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <]]

[shift_expr->shift_expr •>> additive_expr,[||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <]]

--------------------------------------------

##############</状态176>#############

##############<状态177>#############
[relational_expr->relational_expr > shift_expr•,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

[shift_expr->shift_expr •<< additive_expr,[||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <]]

[shift_expr->shift_expr •>> additive_expr,[||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <]]

--------------------------------------------

##############</状态177>#############

##############<状态178>#############
[relational_expr->relational_expr < shift_expr•,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

[shift_expr->shift_expr •<< additive_expr,[||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <]]

[shift_expr->shift_expr •>> additive_expr,[||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <]]

--------------------------------------------

##############</状态178>#############

##############<状态179>#############
[unary_expr->SIZEOF ( type •),[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------

##############</状态179>#############

##############<状态180>#############
[additive_expr->additive_expr •+ multiplicative_expr,[+, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -]]

[additive_expr->additive_expr •- multiplicative_expr,[+, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -]]

[shift_expr->shift_expr << additive_expr•,[||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <]]

--------------------------------------------

##############</状态180>#############

##############<状态181>#############
[additive_expr->additive_expr •+ multiplicative_expr,[+, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -]]

[additive_expr->additive_expr •- multiplicative_expr,[+, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -]]

[shift_expr->shift_expr >> additive_expr•,[||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <]]

--------------------------------------------

##############</状态181>#############

##############<状态182>#############
[equality_expr->equality_expr == relational_expr•,[||, ;, ?, ], ==, !=, :, &&, comma, )]]

[relational_expr->relational_expr •> shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

[relational_expr->relational_expr •>= shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

[relational_expr->relational_expr •< shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

[relational_expr->relational_expr •<= shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

--------------------------------------------

##############</状态182>#############

##############<状态183>#############
[equality_expr->equality_expr != relational_expr•,[||, ;, ?, ], ==, !=, :, &&, comma, )]]

[relational_expr->relational_expr •> shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

[relational_expr->relational_expr •>= shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

[relational_expr->relational_expr •< shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

[relational_expr->relational_expr •<= shift_expr,[||, ?, ], ==, !=, :, &&, comma, ), <=, ;, >=, >, <]]

--------------------------------------------

##############</状态183>#############

##############<状态184>#############
[primary_expr->( expr )•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态184>#############

##############<状态185>#############
[term->( type ) •unary_expr,[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------
[CONSTANT->•FLOAT,[]]

[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•primary_expr,[]]

[postfix_expr->•postfix_expr ( ),[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]


##############</状态185>#############

##############<状态186>#############
[multiplicative_expr->multiplicative_expr / term•,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

--------------------------------------------

##############</状态186>#############

##############<状态187>#############
[multiplicative_expr->multiplicative_expr * term•,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

--------------------------------------------

##############</状态187>#############

##############<状态188>#############
[multiplicative_expr->multiplicative_expr % term•,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

--------------------------------------------

##############</状态188>#############

##############<状态189>#############
[additive_expr->additive_expr + multiplicative_expr•,[+, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -]]

[multiplicative_expr->multiplicative_expr •/ term,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

[multiplicative_expr->multiplicative_expr •* term,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

[multiplicative_expr->multiplicative_expr •% term,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

--------------------------------------------

##############</状态189>#############

##############<状态190>#############
[additive_expr->additive_expr - multiplicative_expr•,[+, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -]]

[multiplicative_expr->multiplicative_expr •/ term,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

[multiplicative_expr->multiplicative_expr •* term,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

[multiplicative_expr->multiplicative_expr •% term,[/, +, ||, ?, ], ==, !=, :, &&, <<, >>, comma, ), <=, ;, >=, >, <, -, *, %]]

--------------------------------------------

##############</状态190>#############

##############<状态191>#############
[initial_part->comma name •optional_expr,[;, comma]]

[optional_expr-•,[;, comma]]

--------------------------------------------
[optional_expr->•= expr,[]]


##############</状态191>#############

##############<状态192>#############
[defun->storage type name ( params ) block•,[$, struct, int, char, unsigned, long, short, void, TYPEDEF, union, static, signed, const, bool, float, double]]

--------------------------------------------

##############</状态192>#############

##############<状态193>#############
[block->{ •block_componets },[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, TYPEDEF, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, $, int, }, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, const, float]]

[block_componets-•,[+, {, !, return, struct, FLOAT, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[block_componets->•block_componets block_componet,[]]


##############</状态193>#############

##############<状态194>#############
[kwargs->comma ...•,[)]]

--------------------------------------------

##############</状态194>#############

##############<状态195>#############
[fixed_params->fixed_params comma param•,[comma, )]]

--------------------------------------------

##############</状态195>#############

##############<状态196>#############
[fixed_param_ref->fixed_param_ref comma type•,[comma, )]]

--------------------------------------------

##############</状态196>#############

##############<状态197>#############
[postfix_expr->postfix_expr [ expr ]•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态197>#############

##############<状态198>#############
[args->args comma •expr,[comma, )]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态198>#############

##############<状态199>#############
[postfix_expr->postfix_expr ( args )•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, ], [, !=, :, >>, comma, ), <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态199>#############

##############<状态200>#############
[conditional_expr->logical_or_expr ? expr : •conditional_expr,[;, ], :, comma, )]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态200>#############

##############<状态201>#############
[unary_expr->SIZEOF ( type )•,[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------

##############</状态201>#############

##############<状态202>#############
[term->( type ) unary_expr•,[+, ?, /=, ==, -=, &&, <<, +=, ;, >=, *, *=, %, /, ||, =, ], !=, :, >>, comma, ), <=, %=, >, <, -]]

--------------------------------------------

##############</状态202>#############

##############<状态203>#############
[initial_part->comma name optional_expr•,[;, comma]]

--------------------------------------------

##############</状态203>#############

##############<状态204>#############
[block->{ block_componets •},[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, TYPEDEF, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, $, int, }, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, const, float]]

[block_componets->block_componets •block_componet,[+, {, !, return, struct, FLOAT, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

[storage-•,[short, void, union, struct, int, char, unsigned, signed, bool, float, long, double]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[block->•{ block_componets },[]]

[block_componet->•stmt,[]]

[block_componet->•defvars,[]]

[break_stmt->•break ;,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[continue_stmt->•continue ;,[]]

[defvars->•storage type name optional_expr initial_parts ;,[]]

[dowhile_stmt->•do stmt util ( expr ) ;,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[for_stmt->•for ( forIniitialer optional_for_expr ; optional_for_exprs ) stmt,[]]

[goto_stmt->•goto id ;,[]]

[if_stmt->•if ( expr ) stmt else stmt,[]]

[if_stmt->•if ( expr ) stmt,[]]

[label_stmt->•id : stmt,[]]

[label_stmt->•case INTEGER : stmt,[]]

[label_stmt->•defult :,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[return_stmt->•return expr ;,[]]

[return_stmt->•return ;,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[stmt->•dowhile_stmt,[]]

[stmt->•goto_stmt,[]]

[stmt->•expr ;,[]]

[stmt->•return_stmt,[]]

[stmt->•label_stmt,[]]

[stmt->•break_stmt,[]]

[stmt->•for_stmt,[]]

[stmt->•if_stmt,[]]

[stmt->•continue_stmt,[]]

[stmt->•while_stmt,[]]

[stmt->•block,[]]

[stmt->•;,[]]

[stmt->•switch_stmt,[]]

[storage->•static,[]]

[switch_stmt->•switch ( expr ) { label_stmts },[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[while_stmt->•while ( expr ) stmt,[]]


##############</状态204>#############

##############<状态205>#############
[args->args comma expr•,[comma, )]]

--------------------------------------------

##############</状态205>#############

##############<状态206>#############
[conditional_expr->logical_or_expr ? expr : conditional_expr•,[;, ], :, comma, )]]

--------------------------------------------

##############</状态206>#############

##############<状态207>#############
[stmt->expr •;,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态207>#############

##############<状态208>#############
[stmt->if_stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态208>#############

##############<状态209>#############
[stmt->dowhile_stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态209>#############

##############<状态210>#############
[block_componet->defvars•,[+, {, !, return, struct, FLOAT, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态210>#############

##############<状态211>#############
[defvars->storage •type name optional_expr initial_parts ;,[+, {, !, return, struct, FLOAT, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[int_type->•int,[]]

[int_type->•short,[]]

[int_type->•long,[]]

[int_type->•long long,[]]

[primary_type->•signed int_type,[]]

[primary_type->•struct id,[]]

[primary_type->•union id,[]]

[primary_type->•int_type,[]]

[primary_type->•double,[]]

[primary_type->•char,[]]

[primary_type->•void,[]]

[primary_type->•bool,[]]

[primary_type->•float,[]]

[primary_type->•unsigned int_type,[]]

[type->•primary_type type_postfix,[]]


##############</状态211>#############

##############<状态212>#############
[label_stmt->defult •:,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态212>#############

##############<状态213>#############
[for_stmt->for •( forIniitialer optional_for_expr ; optional_for_exprs ) stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态213>#############

##############<状态214>#############
[while_stmt->while •( expr ) stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态214>#############

##############<状态215>#############
[break_stmt->break •;,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态215>#############

##############<状态216>#############
[stmt->label_stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态216>#############

##############<状态217>#############
[stmt->continue_stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态217>#############

##############<状态218>#############
[if_stmt->if •( expr ) stmt else stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

[if_stmt->if •( expr ) stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态218>#############

##############<状态219>#############
[switch_stmt->switch •( expr ) { label_stmts },[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态219>#############

##############<状态220>#############
[return_stmt->return •expr ;,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

[return_stmt->return •;,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态220>#############

##############<状态221>#############
[stmt->while_stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态221>#############

##############<状态222>#############
[stmt->return_stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态222>#############

##############<状态223>#############
[stmt->;•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态223>#############

##############<状态224>#############
[label_stmt->case •INTEGER : stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态224>#############

##############<状态225>#############
[stmt->for_stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态225>#############

##############<状态226>#############
[label_stmt->id •: stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

[primary_expr->id•,[+, ?, /=, ==, -=, &&, <<, ->, +=, ;, >=, --, *, ., *=, %, /, ||, ++, =, [, !=, >>, <=, %=, >, <, (, -]]

--------------------------------------------

##############</状态226>#############

##############<状态227>#############
[goto_stmt->goto •id ;,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态227>#############

##############<状态228>#############
[continue_stmt->continue •;,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态228>#############

##############<状态229>#############
[dowhile_stmt->do •stmt util ( expr ) ;,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[block->•{ block_componets },[]]

[break_stmt->•break ;,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[continue_stmt->•continue ;,[]]

[dowhile_stmt->•do stmt util ( expr ) ;,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[for_stmt->•for ( forIniitialer optional_for_expr ; optional_for_exprs ) stmt,[]]

[goto_stmt->•goto id ;,[]]

[if_stmt->•if ( expr ) stmt else stmt,[]]

[if_stmt->•if ( expr ) stmt,[]]

[label_stmt->•id : stmt,[]]

[label_stmt->•case INTEGER : stmt,[]]

[label_stmt->•defult :,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[return_stmt->•return expr ;,[]]

[return_stmt->•return ;,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[stmt->•dowhile_stmt,[]]

[stmt->•goto_stmt,[]]

[stmt->•expr ;,[]]

[stmt->•return_stmt,[]]

[stmt->•label_stmt,[]]

[stmt->•break_stmt,[]]

[stmt->•for_stmt,[]]

[stmt->•if_stmt,[]]

[stmt->•continue_stmt,[]]

[stmt->•while_stmt,[]]

[stmt->•block,[]]

[stmt->•;,[]]

[stmt->•switch_stmt,[]]

[switch_stmt->•switch ( expr ) { label_stmts },[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[while_stmt->•while ( expr ) stmt,[]]


##############</状态229>#############

##############<状态230>#############
[block->{ block_componets }•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, TYPEDEF, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, $, int, }, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, const, float]]

--------------------------------------------

##############</状态230>#############

##############<状态231>#############
[stmt->switch_stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态231>#############

##############<状态232>#############
[block_componets->block_componets block_componet•,[+, {, !, return, struct, FLOAT, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态232>#############

##############<状态233>#############
[block_componet->stmt•,[+, {, !, return, struct, FLOAT, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态233>#############

##############<状态234>#############
[stmt->goto_stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态234>#############

##############<状态235>#############
[stmt->break_stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态235>#############

##############<状态236>#############
[stmt->block•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态236>#############

##############<状态237>#############
[stmt->expr ;•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态237>#############

##############<状态238>#############
[defvars->storage type •name optional_expr initial_parts ;,[+, {, !, return, struct, FLOAT, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[name->•id,[]]


##############</状态238>#############

##############<状态239>#############
[label_stmt->defult :•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态239>#############

##############<状态240>#############
[for_stmt->for ( •forIniitialer optional_for_expr ; optional_for_exprs ) stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

[optional_for_expr-•,[;, comma]]

[storage-•,[short, void, union, struct, int, char, unsigned, signed, bool, float, long, double]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[defvars->•storage type name optional_expr initial_parts ;,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[forIniitialer->•defvars,[]]

[forIniitialer->•optional_for_exprs ;,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[optional_for_expr->•expr,[]]

[optional_for_exprs->•optional_for_expr,[]]

[optional_for_exprs->•optional_for_exprs comma optional_for_expr,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[storage->•static,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态240>#############

##############<状态241>#############
[while_stmt->while ( •expr ) stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态241>#############

##############<状态242>#############
[break_stmt->break ;•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态242>#############

##############<状态243>#############
[if_stmt->if ( •expr ) stmt else stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

[if_stmt->if ( •expr ) stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态243>#############

##############<状态244>#############
[switch_stmt->switch ( •expr ) { label_stmts },[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态244>#############

##############<状态245>#############
[return_stmt->return expr •;,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态245>#############

##############<状态246>#############
[return_stmt->return ;•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态246>#############

##############<状态247>#############
[label_stmt->case INTEGER •: stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态247>#############

##############<状态248>#############
[label_stmt->id : •stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[block->•{ block_componets },[]]

[break_stmt->•break ;,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[continue_stmt->•continue ;,[]]

[dowhile_stmt->•do stmt util ( expr ) ;,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[for_stmt->•for ( forIniitialer optional_for_expr ; optional_for_exprs ) stmt,[]]

[goto_stmt->•goto id ;,[]]

[if_stmt->•if ( expr ) stmt else stmt,[]]

[if_stmt->•if ( expr ) stmt,[]]

[label_stmt->•id : stmt,[]]

[label_stmt->•case INTEGER : stmt,[]]

[label_stmt->•defult :,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[return_stmt->•return expr ;,[]]

[return_stmt->•return ;,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[stmt->•dowhile_stmt,[]]

[stmt->•goto_stmt,[]]

[stmt->•expr ;,[]]

[stmt->•return_stmt,[]]

[stmt->•label_stmt,[]]

[stmt->•break_stmt,[]]

[stmt->•for_stmt,[]]

[stmt->•if_stmt,[]]

[stmt->•continue_stmt,[]]

[stmt->•while_stmt,[]]

[stmt->•block,[]]

[stmt->•;,[]]

[stmt->•switch_stmt,[]]

[switch_stmt->•switch ( expr ) { label_stmts },[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[while_stmt->•while ( expr ) stmt,[]]


##############</状态248>#############

##############<状态249>#############
[goto_stmt->goto id •;,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态249>#############

##############<状态250>#############
[continue_stmt->continue ;•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态250>#############

##############<状态251>#############
[dowhile_stmt->do stmt •util ( expr ) ;,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态251>#############

##############<状态252>#############
[defvars->storage type name •optional_expr initial_parts ;,[+, {, !, return, struct, FLOAT, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

[optional_expr-•,[;, comma]]

--------------------------------------------
[optional_expr->•= expr,[]]


##############</状态252>#############

##############<状态253>#############
[optional_for_exprs->optional_for_expr•,[;, comma, )]]

--------------------------------------------

##############</状态253>#############

##############<状态254>#############
[optional_for_expr->expr•,[;, comma, )]]

--------------------------------------------

##############</状态254>#############

##############<状态255>#############
[forIniitialer->optional_for_exprs •;,[+, CHARACTOR, ++, INTEGER, !, FLOAT, STRING, ;, --, SIZEOF, ~, &, id, (, -, *]]

[optional_for_exprs->optional_for_exprs •comma optional_for_expr,[;, comma]]

--------------------------------------------

##############</状态255>#############

##############<状态256>#############
[forIniitialer->defvars•,[+, CHARACTOR, ++, INTEGER, !, FLOAT, STRING, ;, --, SIZEOF, ~, &, id, (, -, *]]

--------------------------------------------

##############</状态256>#############

##############<状态257>#############
[for_stmt->for ( forIniitialer •optional_for_expr ; optional_for_exprs ) stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

[optional_for_expr-•,[;]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[optional_for_expr->•expr,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态257>#############

##############<状态258>#############
[while_stmt->while ( expr •) stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态258>#############

##############<状态259>#############
[if_stmt->if ( expr •) stmt else stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

[if_stmt->if ( expr •) stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态259>#############

##############<状态260>#############
[switch_stmt->switch ( expr •) { label_stmts },[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态260>#############

##############<状态261>#############
[return_stmt->return expr ;•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态261>#############

##############<状态262>#############
[label_stmt->case INTEGER : •stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[block->•{ block_componets },[]]

[break_stmt->•break ;,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[continue_stmt->•continue ;,[]]

[dowhile_stmt->•do stmt util ( expr ) ;,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[for_stmt->•for ( forIniitialer optional_for_expr ; optional_for_exprs ) stmt,[]]

[goto_stmt->•goto id ;,[]]

[if_stmt->•if ( expr ) stmt else stmt,[]]

[if_stmt->•if ( expr ) stmt,[]]

[label_stmt->•id : stmt,[]]

[label_stmt->•case INTEGER : stmt,[]]

[label_stmt->•defult :,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[return_stmt->•return expr ;,[]]

[return_stmt->•return ;,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[stmt->•dowhile_stmt,[]]

[stmt->•goto_stmt,[]]

[stmt->•expr ;,[]]

[stmt->•return_stmt,[]]

[stmt->•label_stmt,[]]

[stmt->•break_stmt,[]]

[stmt->•for_stmt,[]]

[stmt->•if_stmt,[]]

[stmt->•continue_stmt,[]]

[stmt->•while_stmt,[]]

[stmt->•block,[]]

[stmt->•;,[]]

[stmt->•switch_stmt,[]]

[switch_stmt->•switch ( expr ) { label_stmts },[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[while_stmt->•while ( expr ) stmt,[]]


##############</状态262>#############

##############<状态263>#############
[label_stmt->id : stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态263>#############

##############<状态264>#############
[goto_stmt->goto id ;•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态264>#############

##############<状态265>#############
[dowhile_stmt->do stmt util •( expr ) ;,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态265>#############

##############<状态266>#############
[forIniitialer->optional_for_exprs ;•,[+, CHARACTOR, ++, INTEGER, !, FLOAT, STRING, ;, --, SIZEOF, ~, &, id, (, -, *]]

--------------------------------------------

##############</状态266>#############

##############<状态267>#############
[optional_for_expr-•,[;, comma, )]]

[optional_for_exprs->optional_for_exprs comma •optional_for_expr,[;, comma, )]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[optional_for_expr->•expr,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态267>#############

##############<状态268>#############
[for_stmt->for ( forIniitialer optional_for_expr •; optional_for_exprs ) stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态268>#############

##############<状态269>#############
[while_stmt->while ( expr ) •stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[block->•{ block_componets },[]]

[break_stmt->•break ;,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[continue_stmt->•continue ;,[]]

[dowhile_stmt->•do stmt util ( expr ) ;,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[for_stmt->•for ( forIniitialer optional_for_expr ; optional_for_exprs ) stmt,[]]

[goto_stmt->•goto id ;,[]]

[if_stmt->•if ( expr ) stmt else stmt,[]]

[if_stmt->•if ( expr ) stmt,[]]

[label_stmt->•id : stmt,[]]

[label_stmt->•case INTEGER : stmt,[]]

[label_stmt->•defult :,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[return_stmt->•return expr ;,[]]

[return_stmt->•return ;,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[stmt->•dowhile_stmt,[]]

[stmt->•goto_stmt,[]]

[stmt->•expr ;,[]]

[stmt->•return_stmt,[]]

[stmt->•label_stmt,[]]

[stmt->•break_stmt,[]]

[stmt->•for_stmt,[]]

[stmt->•if_stmt,[]]

[stmt->•continue_stmt,[]]

[stmt->•while_stmt,[]]

[stmt->•block,[]]

[stmt->•;,[]]

[stmt->•switch_stmt,[]]

[switch_stmt->•switch ( expr ) { label_stmts },[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[while_stmt->•while ( expr ) stmt,[]]


##############</状态269>#############

##############<状态270>#############
[if_stmt->if ( expr ) •stmt else stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

[if_stmt->if ( expr ) •stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[block->•{ block_componets },[]]

[break_stmt->•break ;,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[continue_stmt->•continue ;,[]]

[dowhile_stmt->•do stmt util ( expr ) ;,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[for_stmt->•for ( forIniitialer optional_for_expr ; optional_for_exprs ) stmt,[]]

[goto_stmt->•goto id ;,[]]

[if_stmt->•if ( expr ) stmt else stmt,[]]

[if_stmt->•if ( expr ) stmt,[]]

[label_stmt->•id : stmt,[]]

[label_stmt->•case INTEGER : stmt,[]]

[label_stmt->•defult :,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[return_stmt->•return expr ;,[]]

[return_stmt->•return ;,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[stmt->•dowhile_stmt,[]]

[stmt->•goto_stmt,[]]

[stmt->•expr ;,[]]

[stmt->•return_stmt,[]]

[stmt->•label_stmt,[]]

[stmt->•break_stmt,[]]

[stmt->•for_stmt,[]]

[stmt->•if_stmt,[]]

[stmt->•continue_stmt,[]]

[stmt->•while_stmt,[]]

[stmt->•block,[]]

[stmt->•;,[]]

[stmt->•switch_stmt,[]]

[switch_stmt->•switch ( expr ) { label_stmts },[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[while_stmt->•while ( expr ) stmt,[]]


##############</状态270>#############

##############<状态271>#############
[switch_stmt->switch ( expr ) •{ label_stmts },[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态271>#############

##############<状态272>#############
[label_stmt->case INTEGER : stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态272>#############

##############<状态273>#############
[dowhile_stmt->do stmt util ( •expr ) ;,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态273>#############

##############<状态274>#############
[optional_for_exprs->optional_for_exprs comma optional_for_expr•,[;, comma, )]]

--------------------------------------------

##############</状态274>#############

##############<状态275>#############
[for_stmt->for ( forIniitialer optional_for_expr ; •optional_for_exprs ) stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

[optional_for_expr-•,[comma, )]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[optional_for_expr->•expr,[]]

[optional_for_exprs->•optional_for_expr,[]]

[optional_for_exprs->•optional_for_exprs comma optional_for_expr,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]


##############</状态275>#############

##############<状态276>#############
[while_stmt->while ( expr ) stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态276>#############

##############<状态277>#############
[if_stmt->if ( expr ) stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

[if_stmt->if ( expr ) stmt •else stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态277>#############

##############<状态278>#############
[switch_stmt->switch ( expr ) { •label_stmts },[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[label_stmt->•id : stmt,[]]

[label_stmt->•defult :,[]]

[label_stmt->•case INTEGER : stmt,[]]

[label_stmts->•label_stmts label_stmt,[]]

[label_stmts->•label_stmt,[]]


##############</状态278>#############

##############<状态279>#############
[dowhile_stmt->do stmt util ( expr •) ;,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态279>#############

##############<状态280>#############
[for_stmt->for ( forIniitialer optional_for_expr ; optional_for_exprs •) stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

[optional_for_exprs->optional_for_exprs •comma optional_for_expr,[comma, )]]

--------------------------------------------

##############</状态280>#############

##############<状态281>#############
[if_stmt->if ( expr ) stmt else •stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[block->•{ block_componets },[]]

[break_stmt->•break ;,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[continue_stmt->•continue ;,[]]

[dowhile_stmt->•do stmt util ( expr ) ;,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[for_stmt->•for ( forIniitialer optional_for_expr ; optional_for_exprs ) stmt,[]]

[goto_stmt->•goto id ;,[]]

[if_stmt->•if ( expr ) stmt else stmt,[]]

[if_stmt->•if ( expr ) stmt,[]]

[label_stmt->•id : stmt,[]]

[label_stmt->•case INTEGER : stmt,[]]

[label_stmt->•defult :,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[return_stmt->•return expr ;,[]]

[return_stmt->•return ;,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[stmt->•dowhile_stmt,[]]

[stmt->•goto_stmt,[]]

[stmt->•expr ;,[]]

[stmt->•return_stmt,[]]

[stmt->•label_stmt,[]]

[stmt->•break_stmt,[]]

[stmt->•for_stmt,[]]

[stmt->•if_stmt,[]]

[stmt->•continue_stmt,[]]

[stmt->•while_stmt,[]]

[stmt->•block,[]]

[stmt->•;,[]]

[stmt->•switch_stmt,[]]

[switch_stmt->•switch ( expr ) { label_stmts },[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[while_stmt->•while ( expr ) stmt,[]]


##############</状态281>#############

##############<状态282>#############
[label_stmts->label_stmts •label_stmt,[}, case, defult, id]]

[switch_stmt->switch ( expr ) { label_stmts •},[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[label_stmt->•id : stmt,[]]

[label_stmt->•defult :,[]]

[label_stmt->•case INTEGER : stmt,[]]


##############</状态282>#############

##############<状态283>#############
[label_stmts->label_stmt•,[}, case, defult, id]]

--------------------------------------------

##############</状态283>#############

##############<状态284>#############
[label_stmt->id •: stmt,[}, case, defult, id]]

--------------------------------------------

##############</状态284>#############

##############<状态285>#############
[dowhile_stmt->do stmt util ( expr ) •;,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态285>#############

##############<状态286>#############
[for_stmt->for ( forIniitialer optional_for_expr ; optional_for_exprs ) •stmt,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------
[CONSTANT->•INTEGER,[]]

[CONSTANT->•STRING,[]]

[CONSTANT->•CHARACTOR,[]]

[CONSTANT->•FLOAT,[]]

[additive_expr->•additive_expr + multiplicative_expr,[]]

[additive_expr->•additive_expr - multiplicative_expr,[]]

[additive_expr->•multiplicative_expr,[]]

[block->•{ block_componets },[]]

[break_stmt->•break ;,[]]

[conditional_expr->•logical_or_expr,[]]

[conditional_expr->•logical_or_expr ? expr : conditional_expr,[]]

[continue_stmt->•continue ;,[]]

[dowhile_stmt->•do stmt util ( expr ) ;,[]]

[equality_expr->•equality_expr != relational_expr,[]]

[equality_expr->•equality_expr == relational_expr,[]]

[equality_expr->•relational_expr,[]]

[expr->•conditional_expr,[]]

[expr->•term opassign_op expr,[]]

[expr->•term = expr,[]]

[for_stmt->•for ( forIniitialer optional_for_expr ; optional_for_exprs ) stmt,[]]

[goto_stmt->•goto id ;,[]]

[if_stmt->•if ( expr ) stmt else stmt,[]]

[if_stmt->•if ( expr ) stmt,[]]

[label_stmt->•id : stmt,[]]

[label_stmt->•case INTEGER : stmt,[]]

[label_stmt->•defult :,[]]

[logical_and_expr->•logical_and_expr && equality_expr,[]]

[logical_and_expr->•equality_expr,[]]

[logical_or_expr->•logical_and_expr,[]]

[logical_or_expr->•logical_or_expr || logical_and_expr,[]]

[multiplicative_expr->•multiplicative_expr % term,[]]

[multiplicative_expr->•multiplicative_expr * term,[]]

[multiplicative_expr->•multiplicative_expr / term,[]]

[multiplicative_expr->•term,[]]

[postfix_expr->•postfix_expr [ expr ],[]]

[postfix_expr->•postfix_expr -> name,[]]

[postfix_expr->•postfix_expr ( args ),[]]

[postfix_expr->•postfix_expr . name,[]]

[postfix_expr->•postfix_expr ( ),[]]

[postfix_expr->•postfix_expr --,[]]

[postfix_expr->•postfix_expr ++,[]]

[postfix_expr->•primary_expr,[]]

[primary_expr->•( expr ),[]]

[primary_expr->•id,[]]

[primary_expr->•CONSTANT,[]]

[relational_expr->•relational_expr > shift_expr,[]]

[relational_expr->•relational_expr < shift_expr,[]]

[relational_expr->•relational_expr >= shift_expr,[]]

[relational_expr->•shift_expr,[]]

[relational_expr->•relational_expr <= shift_expr,[]]

[return_stmt->•return expr ;,[]]

[return_stmt->•return ;,[]]

[shift_expr->•additive_expr,[]]

[shift_expr->•shift_expr << additive_expr,[]]

[shift_expr->•shift_expr >> additive_expr,[]]

[stmt->•dowhile_stmt,[]]

[stmt->•goto_stmt,[]]

[stmt->•expr ;,[]]

[stmt->•return_stmt,[]]

[stmt->•label_stmt,[]]

[stmt->•break_stmt,[]]

[stmt->•for_stmt,[]]

[stmt->•if_stmt,[]]

[stmt->•continue_stmt,[]]

[stmt->•while_stmt,[]]

[stmt->•block,[]]

[stmt->•;,[]]

[stmt->•switch_stmt,[]]

[switch_stmt->•switch ( expr ) { label_stmts },[]]

[term->•unary_expr,[]]

[term->•( type ) unary_expr,[]]

[unary_expr->•-- unary_expr,[]]

[unary_expr->•SIZEOF unary_expr,[]]

[unary_expr->•SIZEOF ( type ),[]]

[unary_expr->•postfix_expr,[]]

[unary_expr->•++ unary_expr,[]]

[unary_expr->•unary_operator term,[]]

[unary_operator->•&,[]]

[unary_operator->•!,[]]

[unary_operator->•*,[]]

[unary_operator->•~,[]]

[unary_operator->•-,[]]

[unary_operator->•+,[]]

[while_stmt->•while ( expr ) stmt,[]]


##############</状态286>#############

##############<状态287>#############
[if_stmt->if ( expr ) stmt else stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态287>#############

##############<状态288>#############
[label_stmts->label_stmts label_stmt•,[}, case, defult, id]]

--------------------------------------------

##############</状态288>#############

##############<状态289>#############
[switch_stmt->switch ( expr ) { label_stmts }•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态289>#############

##############<状态290>#############
[dowhile_stmt->do stmt util ( expr ) ;•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, INTEGER, do, util, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态290>#############

##############<状态291>#############
[for_stmt->for ( forIniitialer optional_for_expr ; optional_for_exprs ) stmt•,[+, {, !, return, struct, FLOAT, else, char, STRING, long, short, ;, --, case, ~, &, static, id, *, bool, double, goto, continue, CHARACTOR, ++, util, INTEGER, do, }, int, defult, unsigned, for, while, break, void, union, SIZEOF, signed, (, -, if, switch, float]]

--------------------------------------------

##############</状态291>#############
