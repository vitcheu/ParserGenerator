program ::= external_declaration | program external_declaration

external_declaration ::= function_definition | declaration

function_definition ::= type_specifier declarator compound_statement

type_specifier ::= VOID | CHAR | INT | FLOAT

declarator ::= pointer direct_declarator | direct_declarator

pointer ::= '*' | '*' pointer

direct_declarator ::= IDENTIFIER | direct_declarator '[' ']' 
	| direct_declarator '[' constant_expression ']' 
	| IDENTIFIER '(' parameter_list ')' 
	| IDENTIFIER '(' ')' 
	| direct_declarator comma identifier_list

identifier_list ::= IDENTIFIER | identifier_list comma IDENTIFIER

constant_expression ::= conditional_expression

parameter_list ::= parameter_declaration 
	| parameter_list comma parameter_declaration

parameter_declaration ::= declaration_specifiers IDENTIFIER

compound_statement ::= '{' '}' | '{' statement_list '}' 
	| '{' declaration_list statement_list '}'

declaration_list ::= declaration | declaration_list declaration

declaration ::= init_declarator | init_declarator_list comma init_declarator

init_declarator ::= declarator | declarator '=' initializer

initializer ::= assignment_expression | '{' initializer_list '}' 
	| '{' initializer_list comma '}'

initializer_list ::= initializer | initializer_list comma initializer

statement_list ::= statement | statement_list statement

statement ::= compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement

expression_statement ::= ';' | expression ';'

selection_statement ::= IF '(' expression ')' statement
	| IF '(' expression ')' statement ELSE statement

iteration_statement ::= WHILE '(' expression ')' statement
	| FOR '(' expression_statement expression_statement ')' statement
	| FOR '(' expression_statement expression_statement expression ')' statement

jump_statement ::= CONTINUE ';' | BREAK ';' | RETURN ';' | RETURN expression ';'

expression ::= assignment_expression | expression comma assignment_expression

assignment_expression ::= conditional_expression
	| unary_expression assignment_operator assignment_expression

conditional_expression ::= logical_or_expression
	| logical_or_expression '?' expression ':' conditional_expression

logical_or_expression ::= logical_and_expression
	| logical_or_expression OR_OP logical_and_expression

logical_and_expression ::= inclusive_or_expression
	| logical_and_expression AND_OP inclusive_or_expression

inclusive_or_expression ::= exclusive_or_expression
	| inclusive_or_expression '|' exclusive_or_expression

exclusive_or_expression ::= and_expression
	| exclusive_or_expression '^' and_expression

and_expression ::= equality_expression
	| and_expression '&' equality_expression

equality_expression ::= relational_expression
	| equality_expression EQ_OP relational_expression
	| equality_expression NE_OP relational_expression

relational_expression ::= shift_expression
	| relational_expression '<' shift_expression
	| relational_expression '>' shift_expression
	| relational_expression LE_OP shift_expression
	| relational_expression GE_OP shift_expression

shift_expression ::= additive_expression
	| shift_expression LEFT_OP additive_expression
	| shift_expression RIGHT_OP additive_expression

additive_expression ::= multiplicative_expression
	| additive_expression '+' multiplicative_expression
	| additive_expression '-' multiplicative_expression

multiplicative_expression ::= cast_expression
	| multiplicative_expression '*' cast_expression
	| multiplicative_expression '/' cast_expression
	| multiplicative_expression '%' cast_expression

cast_expression ::= unary_expression | '(' type_name ')' cast_expression

unary_expression ::= postfix_expression
	| INC_OP unary_expression
	| DEC_OP unary_expression
	| unary_operator cast_expression
	| SIZEOF unary_expression
	| SIZEOF '(' type_name ')'

postfix_expression ::= primary_expression
	| postfix_expression '[' expression ']'
	| postfix_expression '(' ')'
	| postfix_expression '(' argument_expression_list ')'
	| postfix_expression '.' IDENTIFIER
	| postfix_expression PTR_OP IDENTIFIER
	| postfix_expression INC_OP
	| postfix_expression DEC_OP

primary_expression ::= IDENTIFIER
	| CONSTANT
	| STRING_LITERAL
	| '(' expression ')'

argument_expression_list ::= assignment_expression
	| argument_expression_list comma assignment_expression
